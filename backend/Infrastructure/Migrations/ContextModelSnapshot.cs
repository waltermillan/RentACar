// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Core.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Brand")
                        .HasColumnType("TEXT")
                        .HasColumnName("brand");

                    b.Property<int>("IdPrice")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_price");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT")
                        .HasColumnName("model");

                    b.Property<int>("Rented")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rented");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("birth_date");

                    b.Property<string>("Document")
                        .HasColumnType("TEXT")
                        .HasColumnName("document");

                    b.Property<int>("DocumentType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("document_type");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Core.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Core.Entities.PayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("PayType");
                });

            modelBuilder.Entity("Core.Entities.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("AcceptDiscount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("acceptDiscount");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("Core.Entities.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("Day")
                        .HasColumnType("TEXT")
                        .HasColumnName("day");

                    b.Property<DateTime>("DayRemaining")
                        .HasColumnType("TEXT")
                        .HasColumnName("day_remaining");

                    b.Property<int>("IdCar")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_car");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_customer");

                    b.Property<int>("PayTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pay_type_id");

                    b.Property<int>("PriceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("price_id");

                    b.HasKey("Id");

                    b.HasIndex("IdCar");

                    b.HasIndex("IdCustomer");

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("Core.Entities.Rent", b =>
                {
                    b.HasOne("Core.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
